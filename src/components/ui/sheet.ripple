import { createStore } from 'ripple-file-router';
import { track, on } from 'ripple';
import type { Component } from 'ripple';

interface Props {
	name?: string;
	classes?: string;
	children: Component;
	Trigger: Component;
	direction?: 'right' | 'left' | 'top' | 'bottom';
}

export default component Sheet({ name, direction = 'right', children, Trigger, classes }: Props) {
	const store = createStore({
		isOpen: false,
	}, {
		persist: !!name,
		storageKey: name ?? '',
	});

	const open = track(store.get().isOpen);

	store.subscribe((state) => {
		@open = state.isOpen;
	});
	on(window, 'keydown', (e: keyboardEvent) => {
		if (e.key === 'Escape' && @open) {
			e.preventDefault();
			store.update({
				isOpen: false,
			});
		}
	});

	<div class='inline-block'>
		{/* Unknown: JSXEmptyExpression */}

		/* Unknown: JSXEmptyExpression */

		/* Unknown: JSXEmptyExpression */
		/* Trigger */
		<div onClick={() => store.update({
				isOpen: !@open,
			})}><Trigger /></div>
		const divRef = (el) => {
			if (!el) return;

			if (@open) {
				document.body.appendChild(el);
				const btn = el.querySelector('.closebtn');

				if (btn) btn.addEventListener('click', close);
			} else {
				const btn = el.querySelector('.closebtn');

				if (btn) btn.removeEventListener('click', close);
				document.body.removeChild(el);
			}
		};

		const close = () => {
			store.update({
				isOpen: !@open,
			});
		};

		if (@open) {
			<div {ref divRef} class={`fixed fade-in  dark:bg-black p-4 border-l-[0.1rem] border-gray-300  sheet h-screen bg-white shadow-xl z-[9999] transition-transform w-[35vw] max-md:w-[75vw] duration-300 ease-in-out rounded-l-x   top-0 right-0 `}>
				<div class='mb-4'><button class='closebtn m-2 text-center flex items-center  text-1rem border-black cursor-pointer w-fit px-2 border-2 dark:border-[#a7a3a3]'>{'x'}</button></div>
				<children />
			</div>
		}
	</div>
}
